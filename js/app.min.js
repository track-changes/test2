function getNumber(inputString) {
    return inputString.replace(/[a-zA-Z\s]/g, '');
}
function formatNumberWithSpaces(number) {
    return number.toLocaleString('ru-RU').replace(/,/g, ' ');
}

let burnProgress = document.querySelector('.js-burnProgress');
if (burnProgress) {
    let numberBurn = document.querySelector('.js-numberBurn').textContent;
    let progressGreen = burnProgress.querySelector('.js-progressGreen');
    let progressRed = burnProgress.querySelector('.js-progressRed');
    let totalNumber = document.querySelector('.js-totalNumber').textContent;
    let availableToken = document.querySelector('.js-availableToken');

    let numberGreen = progressGreen.getAttribute('data-number');
    numberGreen = getNumber(numberGreen);
    numberBurn = getNumber(numberBurn);
    totalNumber = getNumber(totalNumber);
    let availableTokenText = numberGreen - numberBurn;
    availableTokenText = formatNumberWithSpaces(availableTokenText) + " RTX";
    availableToken.textContent= availableTokenText;
    let percentEarned = numberGreen / totalNumber * 100;
    let percentBurn = numberBurn / totalNumber * 100;
    
    progressGreen.style.width = `${percentEarned}%`
    progressRed.style.width = `${percentBurn}%`
}
let coin = document.querySelector('.js-coin');
if (coin) {
    coin.addEventListener('click', function(event) {
        const coin = event.currentTarget;
        coin.classList.remove('animate');
        coin.classList.add('animate');
        // Создаем элемент с текстом +1
        const coinText = document.createElement('div');
        coinText.classList.add('about__coin-text');
        coinText.innerText = '+1';
        coin.appendChild(coinText);

        // Устанавливаем позицию элемента по месту клика
        coinText.style.top = (event.clientY - 20) + 'px'; // 20 - половина высоты элемента
        coinText.style.left = (event.clientX - 0) + 'px'; // 10 - половина ширины элемента

        // Анимация появления и исчезновения
        setTimeout(() => {
            coinText.classList.add('fade-out');
            setTimeout(() => {
                coinText.remove(); // Удаляем элемент из DOM
            }, 1000); // Удаляем элемент через 1 секунду после исчезновения
            setTimeout(() => {
                coin.classList.remove('animate');
            }, 200); 
        }, 100); // Устанавливаем задержку перед стартом анимации появления
    });
}
let descriptor = document.querySelector('.descriptor') 
if (descriptor) {
  document.addEventListener("DOMContentLoaded", () => {
    VANTA.DOTS({
      el: ".descriptor",
      mouseControls: true,
      touchControls: true,
      gyroControls: false,
      minHeight: 200.00,
      minWidth: 200.00,
      scale: 1.00,
      scaleMobile: 1.00,
      color: 0xffffff,
      backgroundColor: 0x141414,
      size: 3.70,
      spacing: 40.00,
      showLines: false
    })
  })
}

document.addEventListener('DOMContentLoaded', function() {
    const questions = document.querySelectorAll('.js-question');
    
    questions.forEach(function(question) {
        question.addEventListener('click', function() {
            let item = question.closest('.js-questionItem')
            if (this.classList.contains('open')) {
                this.classList.remove('open');
                item.classList.remove('open');
            } else {
                this.classList.add('open');
                item.classList.add('open');
            }
        });
    });
});
const burgerBtn = document.querySelector('.js-burgerBtn');
const burger = document.querySelector('.js-burger');
const langBtn = document.querySelector('.js-langBtn');
burgerBtn.addEventListener('click', function () {
  burger.classList.toggle('show');
  this.classList.toggle('active')
  if (this.classList.contains('active')) {
    wrapperFixPosition();
  } else {
    wrapperUnfixPosition();
  }
});
document.querySelectorAll('.header__link a').forEach(item => {
  item.addEventListener('click', () => {
    burger.classList.remove('show');
    burgerBtn.classList.remove('active');
    wrapperUnfixPosition();
  });
});
langBtn.addEventListener('click', function () {
  this.classList.toggle('active')
});
function wrapperFixPosition() {
  const fixBlocks = document.querySelectorAll('.js-fixBlock');
  let paddingOffset = window.innerWidth - document.querySelector('body').offsetWidth + 'px';
  setTimeout(function () {
    if (!document.querySelector('body').hasAttribute('wrapper-body-scroll-fix')) {
      let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
      fixBlocks.forEach((el) => {
        el.style.paddingRight = paddingOffset;
      });
      document.querySelector('body').style.overflow = 'hidden';
      document.querySelector('body').setAttribute('wrapper-body-scroll-fix', scrollPosition);
      document.querySelector('body').style.overflow = 'hidden';
      document.querySelector('body').style.position = 'fixed';
      document.querySelector('body').style.top = '-' + scrollPosition + 'px';
      document.querySelector('body').style.left = '0';
      document.querySelector('body').style.width = '100%';
      document.querySelector('body').style.paddingRight = paddingOffset;
    }
  }, 15);
}
function wrapperUnfixPosition() {
  const fixBlocks = document.querySelectorAll('.js-fixBlock');
  if (document.querySelector('body').hasAttribute('wrapper-body-scroll-fix')) {
    let scrollPosition = document.querySelector('body').getAttribute('wrapper-body-scroll-fix');
    document.querySelector('body').removeAttribute('wrapper-body-scroll-fix');
    document.querySelector('body').style.overflow = '';
    document.querySelector('body').style.position = '';
    document.querySelector('body').style.top = '';
    document.querySelector('body').style.left = '';
    document.querySelector('body').style.width = '';
    window.scroll(0, scrollPosition);
    fixBlocks.forEach((el) => {
      el.style.paddingRight = '0px';
    });
    document.querySelector('body').style.paddingRight = '0px';
  }
}
document.addEventListener("DOMContentLoaded", () => {
    let sliderNft = document.querySelector('.js-nftSlider');
    const swiperNft = new Swiper(sliderNft, {
        slidesPerView: 'auto',
        spaceBetween: 16,
        centeredSlides: true,
        draggable: true,
        loop: true,
        grabCursor: true,
        speed: 4500,
        autoplay: {
          delay: 0,
          pauseOnMouseEnter: false,
          disableOnInteraction: false,
        },
        breakpoints: {
            1280: {
                spaceBetween: 24,
            }
        }
    });
});

let questionsShowClues = document.querySelectorAll('.js-showClue');
questionsShowClues.forEach(question => {
  let tooltip = question.nextElementSibling;
  let closeBtn =  tooltip.querySelector('.js-closeTooltip');
  if (window.matchMedia('(hover: hover) and (pointer: fine)').matches) {
    question.addEventListener('mouseenter', function () {
      tooltip.classList.add('active');
    });
    question.addEventListener('mouseleave', function () {
      tooltip.classList.remove('active');
    });
  } else {
    question.addEventListener('click', function () {
      tooltip.classList.add('mobile');
    });
  }

  document.addEventListener('click', function (event) {
    if (!tooltip.contains(event.target) && event.target !== question || event.target == closeBtn) {
      tooltip.classList.remove('mobile');
    }
  });

});